VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "cCBA_DocumentHolder"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Explicit             ' cCBA_DocumentHolder

Private plNoOfDocuments As Long                                     ' Holds the number of docs in the holder-also provides a unique ID for docs that haven't been saved yet
Private psdDocumentList As Scripting.Dictionary                     ' Key: DocName Item: CBA_Document -Contains all the Document Object Instances
Private psdLinkDoc As Scripting.Dictionary                          ' Key: WkBk.Name + "-" + WkSht.Name: DocID-Contains a unique (project-wide) key to the document
''Private psdUDT_SubMst As Scripting.Dictionary
''Private pcUDT_Master As cCBA_UDT_Master
Private psdUDT_Master As Scripting.Dictionary                       ' Key:SysType,  cCBA_UDT_Master - Holds copies of the cCBA_UDT_Master class according to the System Document Type
Private psdSysType As Scripting.Dictionary                          ' Key:DocType, SysType - Holds Keys of copies of the DocType As e_DocuType and returns the System Document Type
'Private psdCellObjectsIndex As Scripting.Dictionary
Private pbIsLive As Boolean                                         ' Identifies if the DocumentHolder isActive
Private psAddinName As String

''Private psAddinName As String

' Holds a set of documents. Allows for documents to be created and managed without necessarily being rendered.
' When a document is requested, a default type is generated. This asks for the data objects required (if they don’t exist It generates and stores them as private variables).
' This class is setup as a single instance against a public variable (Allowing for future expansion).
' The Document Objects (TEN_UT Functionality) are generated by the DocuementHolder and passed to the Document on creation.
' The document holder never retains UT Objects, only Data objects.

Public Function Add_Document(ByVal DocType As e_DocuType, ByVal DocName As String, Optional ByRef DocID As Long = -1, Optional ByRef cDoc_Object As iCBA_Doc_Data) As Boolean
    Dim cDoc As cCBA_Document, strCode As String, cETL As cCBA_UDT_ETL
    Dim sdSubMst As Scripting.Dictionary
    Dim cMast As cCBA_UDT_Master
    Dim lNewDocID As Long
    On Error GoTo Err_Routine
    If Not cDoc_Object Is Nothing Then
        If cDoc_Object.DocumentType <> DocType Then
            MsgBox "Doc Type requested is not in line with Data Object Passed in"
            Add_Document = False
            Exit Function
        End If
    End If
    Application.ScreenUpdating = False
    CBA_BasicFunctions.CBA_Running "Loading Document " & DocName
    If CBA_BasicFunctions.isRunningSheetDisplayed = True Then CBA_BasicFunctions.RunningSheetAddComment 6, 4, "Preparing Document"
    CBA_Error = ""
    ' Init the SD is needed
''    If sdCellObjectsIndex Is Nothing Then Set sdCellObjectsIndex = New Scripting.Dictionary
    ' Create the shell for the ETL Class
    If DocID = 0 Then MsgBox "Cannont create a document for DOCID = 0 ": Add_Document = False: Exit Function
    Set cETL = New cCBA_UDT_ETL
    ' Generate the type of document...
    If DocID > 0 Then                       ' If an existing document, get the UDTs from the UT_DB database
        If cETL.Generate_UDT_ETL(DocType, DocID) = False Then
            MsgBox DocName & " document did not create properly", vbOKOnly
            Stop
            Exit Function
        End If
    Else                                    ' If a new document, get the UDTs from a subset of the Master OA Class
        Call Get_Mast_UDT(DocType)
        Set sdSubMst = Get_SubMst_UDT(DocType)
        If cETL.Generate_UDT_ETL(DocType, DocID, sdSubMst) = False Then
''        If cETL.Generate_UDT_ETL(DocType, DocName, DocID, cMast) = False Then
            MsgBox DocName & " document did not create properly", vbOKOnly
            Stop
            Exit Function
        End If
    End If
    ' Generate the document itself based upon the priorly gotton UDTs
    Set cDoc = New cCBA_Document
    If DocID < 1 Then lNewDocID = lNoOfDocuments + 1 Else lNewDocID = DocID
    If cDoc.BuildDocumentObject(DocName, lNewDocID, DocType, cETL, cDoc_Object) = True Then
        Add_Document = True
        Application.EnableEvents = True
        lNoOfDocuments = lNoOfDocuments + 1
        sdDocumentList.Add lNewDocID, cDoc
        DocID = lNewDocID
        Add_Document = True
    End If

Exit_Routine:

    On Error Resume Next
    If CBA_BasicFunctions.isRunningSheetDisplayed = True Then CBA_BasicFunctions.CBA_Close_Running
    Application.ScreenUpdating = True
    Exit Function
    
Err_Routine:
    CBA_Erl = CLng(VBA.Erl): Call CBA_ProcI("f-cCBA_DocumentHolder.Add", 3)
    CBA_Error = " Error - " & Err.Number & "-" & Err.Description & "-" & CBA_ProcI(, 0)
    Debug.Print CBA_Error
    Stop            ' ^RW Camera + next line
    Resume Next
    Call g_FileWrite(g_GetDB("Gen", True), CBA_Error, , , True, True)
    Call g_Write_Err_Table(Err, CBA_Error, "Gen", CBA_ProcI(, 0, True), CBA_Erl, CBA_TestIP)
    GoTo Exit_Routine
    Resume Next
End Function

'Public Function Save_Document(Optional ByRef DocID As Long = -1) As Boolean
'    Dim cDoc As cCBA_Document
'    Dim cETL As cCBA_UDT_ETL
'
'
'    'DocID = GetDocID(DocID)
'    Set cDoc = sdDocumentList(DocID)
'    Set cETL = cDoc.cUDT_Data
'    tempDocID = cETL.Write_UDT_ETL()
'    If tempDocID < 200 Then
'        MsgBox "Failure in Saving Document"
'        Save_Document = False
'        Exit Function
'    End If
'    cDoc.lDocumentID = tempDocID
'    'NEED TO SAVE NEW DOCID TO SD: @TP CAM
'    If cDoc.lDocumentID > 0 Then cDoc.bIsSaved = True: DocID = cDoc.lDocumentID
'    ''If cDoc.lDocumentID <> DocID Then Set sdDocumentList = ReIdx_SD(sdDocumentList)
'    Save_Document = cDoc.bIsSaved
'End Function

''Private Function Get_Mast_UDT(ByVal DocType As e_DocuType) As cCBA_UDT_Master
Private Sub Get_Mast_UDT(ByVal DocType As e_DocuType)

    Dim SysType As String, cSubMst As cCBA_UDT_Master '', sdMaster As Scripting.Dictionary,
    ''Dim v As Variant ''', cUT As cCBA_UDT
    ' Will Create / Append the cCBA_UDT Master object to sdUDT_Master
    On Error GoTo Err_Routine
    CBA_Error = "": SysType = "x"
    ' Init the scripting.dics if needed
    If sdUDT_Master Is Nothing Then
        Set sdUDT_Master = New Scripting.Dictionary
        Set sdSysType = New Scripting.Dictionary
    Else
        If sdSysType.Exists(DocType) Then SysType = sdSysType(DocType)
    End If
    ' Add the class master dictionary/ies, if it doesn't exist
    If sdUDT_Master.Exists(SysType) Then
        Set cSubMst = sdUDT_Master(SysType)
    ElseIf sdUDT_Master.Exists(SysType) = False And sdSysType.Exists(DocType) = False Then
        Set cSubMst = New cCBA_UDT_Master
        If cSubMst.Generate_UDT(DocType) = False Then
            MsgBox "Sub-Master class not created", vbOKOnly
            Stop
        Else
            SysType = cSubMst.Get_SysType(DocType)
            If Not sdUDT_Master.Exists(SysType) Then sdUDT_Master.Add SysType, cSubMst
            sdSysType.Add DocType, SysType
        End If
    End If
      
    ''Set Get_Mast_UDT = cSubMst.Get_UDT_SD(DocType)
    
Exit_Routine:

    On Error Resume Next
    Exit Sub

Err_Routine:
    CBA_Erl = CLng(VBA.Erl): Call CBA_ProcI("f-cCBA_DocumentHolder.Get_Mast_UDT", 3)
    CBA_Error = " Error - " & Err.Number & "-" & Err.Description & "-" & CBA_ProcI(, 0)
    Debug.Print CBA_Error
    Stop            ' ^RW Camera + next line
    Resume Next
    Call g_FileWrite(g_GetDB("Gen", True), CBA_Error, , , True, True)
    Call g_Write_Err_Table(Err, CBA_Error, "Gen", CBA_ProcI(, 0, True), CBA_Erl, CBA_TestIP)
    GoTo Exit_Routine
    Resume Next
End Sub

Private Function Get_SubMst_UDT(ByVal DocType As e_DocuType) As Scripting.Dictionary
    Dim SysType As String, sdMaster As Scripting.Dictionary, cSubMst As cCBA_UDT_Master ''', cUT As cCBA_UDT
    Dim sdSubMst As Scripting.Dictionary
    ' Will return the appropriate cCBA_UDT Master (copied) object to the calling routine
    On Error GoTo Err_Routine
    CBA_Error = ""
    ' Init the scripting.dic
    Set sdSubMst = New Scripting.Dictionary
    
    If sdSysType.Exists(DocType) = False Then
        MsgBox DocType & " Sub-Master class not created", vbOKOnly
        Stop
    Else
        ' Get the already created Master class
        SysType = sdSysType(DocType)
        Set cSubMst = sdUDT_Master(SysType)
        ' Get the copied UT >>> an SD*
        Set Get_SubMst_UDT = cSubMst.Get_UDT_SD(DocType)
    End If



Exit_Routine:

    On Error Resume Next
    Exit Function

Err_Routine:
    CBA_Erl = CLng(VBA.Erl): Call CBA_ProcI("f-cCBA_DocumentHolder.Get_SubMst_UDT", 3)
    CBA_Error = " Error - " & Err.Number & "-" & Err.Description & "-" & CBA_ProcI(, 0)
    Debug.Print CBA_Error
    Stop            ' ^RW Camera + next line
    Resume Next
    Call g_FileWrite(g_GetDB("Gen", True), CBA_Error, , , True, True)
    Call g_Write_Err_Table(Err, CBA_Error, "Gen", CBA_ProcI(, 0, True), CBA_Erl, CBA_TestIP)
    GoTo Exit_Routine
    Resume Next
End Function


''NEED TO REVIEW AFTER REVIEWING CDOC OBJECT '@TP  @RWCam
'Private Function DecypherDocumentWorkbook(Optional ByVal DocID As Long = -1) As Workbook
'    If sdDocumentList.Exists(DocID) Then Set DecypherDocumentWorkbook = sdDocumentList(DocID).WorkbookRef
'End Function
'Private Function DecypherDocumentWorksheet(Optional ByVal DocID As Long = -1) As Worksheet
'    If sdDocumentList.Exists(DocID) Then Set DecypherDocumentWorksheet = sdDocumentList(DocID)).WorksheetRef
'End Function
'Public Function DestroyDocumentObject(Optional ByVal DocID As Long = -1)
'    If sdDocumentList.Exists(DocID) Then sdDocumentList.Remove (DocID))
'End Function
'Public Function DeleteObjectWorkbookLink(Optional ByVal DocID As Long = -1) As Boolean
'    Dim bDeleteOK As Boolean
'    If sdDocumentList.Exists(DocID)) Then
'        bDeleteOK = DeleteObjectWorksheetLink(DocID))
'        sdDocumentList(DocID)).WorkbookRef = Nothing
'        If bDeleteOK = True Then DeleteObjectWorkbookLink = True
'    End If
'End Function
'Public Function DeleteObjectWorksheetLink(Optional ByVal DocID As Long = -1) As Boolean
'    If sdDocumentList.Exists(DocID)) Then
'        sdDocumentList(DocID)).WorksheetRef = Nothing
'        DeleteObjectWorksheetLink = True
'    End If
'End Function
'NEED TO REVIEW ENDURE DOCUMENT OBJECT COMPLIES ' @TP @RWCam
Public Function ControlObject(ByVal linkID As String, Optional ByRef Target As Range, Optional ByVal sCommand As String, Optional sVal1 As String, Optional lVal1 As Long, Optional lVal2 As Long) As Long
    Dim cDoc As cCBA_Document
    Dim DocID As Long, v As Variant
    On Error GoTo Err_Routine
    CBA_Error = ""
    If IsNumeric(linkID) Then ' Following in case you only have the doc id and not the link id
        DocID = linkID
        For Each v In sdLinkDoc
            If DocID = sdLinkDoc(v) Then
                linkID = v
                Exit For
            End If
        Next
    Else
        DocID = sdLinkDoc(linkID)
    End If
    If sdLinkDoc.Exists(linkID) = False Then ControlObject = False: Exit Function
    If sCommand = "Close" Then
        On Error GoTo Exit_Routine
    End If
    Set cDoc = sdDocumentList(sdLinkDoc(linkID))
    ControlObject = cDoc.ControlDocument(Target, sCommand, DocID, sVal1, lVal1, lVal2)
    If ControlObject > 0 Then
        If sdLinkDoc(linkID) <> DocID Then
            sdLinkDoc(linkID) = DocID
            ReindexDocumentList
        End If
        ''ControlObject = True
    End If
    'Debug.Print Target.Value
Exit_Routine:

    On Error Resume Next
    Exit Function
Err_Routine:
    CBA_Erl = CLng(VBA.Erl): Call CBA_ProcI("sf-cCBA_DocumentHolder.ControlObject", 3)
    CBA_Error = " Error - " & Err.Number & "-" & Err.Description & "-" & CBA_ProcI(, 0)
    Debug.Print CBA_Error
    Stop            ' ^RW Camera + next line
    Resume Next
    Call g_FileWrite(g_GetDB("Gen", True), CBA_Error, , , True, True)
    Call g_Write_Err_Table(Err, CBA_Error, "Gen", CBA_ProcI(, 0, True), CBA_Erl, CBA_TestIP)
    GoTo Exit_Routine
    Resume Next
End Function

Private Function ReindexDocumentList() As Boolean
Dim DL As Scripting.Dictionary
Dim d As cCBA_Document
Dim v As Variant
    Set DL = New Scripting.Dictionary
    For Each v In sdDocumentList
        Set d = sdDocumentList(v)
        'Set D = sdDocumentList(v).Clone
        DL.Add d.lDocumentID, d
    Next
    Set sdDocumentList = DL
End Function
Public Function Render_Document(Optional ByVal DocID As Long = -1) As Boolean
    Dim sNewLinkID As String
    On Error GoTo Err_Routine
    CBA_Error = ""
    If sdDocumentList.Exists(DocID) Then
        If sdDocumentList(DocID).bIsLinked = True Then
            sdDocumentList(DocID).Render
        Else
            sNewLinkID = sdDocumentList(DocID).CrtAndRenderDoc
            sdLinkDoc.Add sNewLinkID, DocID
        End If
        Render_Document = True
    Else
        MsgBox "Document Object does not exist"
        Stop
        GoTo Exit_Routine
    End If
Exit_Routine:

    On Error Resume Next
    Exit Function

Err_Routine:
    CBA_Erl = CLng(VBA.Erl): Call CBA_ProcI("f-cCBA_DocumentHolder.Render_Document", 3)
    CBA_Error = " Error - " & Err.Number & "-" & Err.Description & "-" & CBA_ProcI(, 0)
    Debug.Print CBA_Error
    Stop            ' ^RW Camera + next line
    Resume Next
    Call g_FileWrite(g_GetDB("Gen", True), CBA_Error, , , True, True)
    Call g_Write_Err_Table(Err, CBA_Error, "Gen", CBA_ProcI(, 0, True), CBA_Erl, CBA_TestIP)
    GoTo Exit_Routine
    Resume Next
End Function
Public Function AddChart(ByVal LeftCellPosition As Long, ByVal TopCellPosition As Long, ByVal sChartTemplatePath As String, ByVal DocID As String, _
    ByRef RangeIncLabels As Range, Optional ByRef RangeDataOnly As Range, Optional ByVal sXAxisLabelFormat As String, Optional ByVal bXAxisReversePlotOrder As Boolean, _
        Optional ByVal sYAxisLabelFormat As String, Optional ByVal bYAxisReversePlotOrder As Boolean, Optional ByVal ChartWidth As Double, Optional ChartHeight As Double) As Chart '@TP
    Dim Doc As cCBA_Document
        If sdDocumentList.Exists(CLng(DocID)) Then
            Set AddChart = sdDocumentList(CLng(DocID)).AddChart(LeftCellPosition, TopCellPosition, sChartTemplatePath, DocID, RangeIncLabels, RangeDataOnly, sXAxisLabelFormat, bXAxisReversePlotOrder, sYAxisLabelFormat, bYAxisReversePlotOrder, ChartWidth, ChartHeight)
        End If
End Function
'Private Function GetDocID(Optional ByVal DocID As Long = -1) As Long
'    ' Bring back the DocID if if hasn't been specified
'    If DocID = -1 Then DocID = sdLinkDoc(ActiveWorkbook.Name & "-" & ActiveSheet.CodeName)
'    GetDocID = DocID
'End Function

Private Sub Class_Initialize()
    Dim a As Long '', sAddinName As String ',itmAddIn
    Set sdDocumentList = New Scripting.Dictionary
    Set sdLinkDoc = New Scripting.Dictionary
    sAddinName = CBA_GetActiveAddin
    bIsLive = True
End Sub

Private Sub Class_Terminate(): Set sdDocumentList = Nothing: bIsLive = False: End Sub

Private Property Get lNoOfDocuments() As Long: lNoOfDocuments = plNoOfDocuments: End Property
Private Property Let lNoOfDocuments(ByVal lNewValue As Long): plNoOfDocuments = lNewValue: End Property

Public Property Get sdDocumentList() As Scripting.Dictionary: Set sdDocumentList = psdDocumentList: End Property
Private Property Set sdDocumentList(ByVal objNewValue As Scripting.Dictionary): Set psdDocumentList = objNewValue: End Property

Public Property Get bIsLive() As Boolean: bIsLive = pbIsLive: End Property
Private Property Let bIsLive(ByVal bNewValue As Boolean): pbIsLive = bNewValue: End Property
''Private Property Get sdUDT_SubMst() As Scripting.Dictionary: Set sdUDT_SubMst = psdUDT_SubMst: End Property
''Private Property Set sdUDT_SubMst(ByVal objNewValue As Scripting.Dictionary): Set psdUDT_SubMst = objNewValue: End Property
Public Property Get sdLinkDoc() As Scripting.Dictionary: Set sdLinkDoc = psdLinkDoc: End Property
Private Property Set sdLinkDoc(ByVal objNewValue As Scripting.Dictionary): Set psdLinkDoc = objNewValue: End Property

''Private Property Get cUDT_Master() As cCBA_UDT_Master: Set cUDT_Master = pcUDT_Master: End Property
''Private Property Set cUDT_Master(ByVal objNewValue As cCBA_UDT_Master): Set pcUDT_Master = objNewValue: End Property

Private Property Get sdUDT_Master() As Scripting.Dictionary: Set sdUDT_Master = psdUDT_Master: End Property
Private Property Set sdUDT_Master(ByVal objNewValue As Scripting.Dictionary): Set psdUDT_Master = objNewValue: End Property
Private Property Get sdSysType() As Scripting.Dictionary: Set sdSysType = psdSysType: End Property
Private Property Set sdSysType(ByVal objNewValue As Scripting.Dictionary): Set psdSysType = objNewValue: End Property
Public Property Get sAddinName() As String: sAddinName = psAddinName: End Property
Private Property Let sAddinName(ByVal NewValue As String): psAddinName = NewValue: End Property
